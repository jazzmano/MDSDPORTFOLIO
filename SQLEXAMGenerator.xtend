/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl1.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.mydsl1.sQLEXAM.SQLSystem
import java.util.ArrayList
import org.xtext.example.mydsl1.sQLEXAM.Add
import org.xtext.example.mydsl1.sQLEXAM.Remove
import org.xtext.example.mydsl1.sQLEXAM.Select
import org.xtext.example.mydsl1.sQLEXAM.Relationship
import java.util.List
import org.xtext.example.mydsl1.sQLEXAM.Attribute
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.xmi.impl.XMLResourceImpl
import org.eclipse.emf.ecore.util.EcoreUtil
import org.xtext.example.mydsl1.sQLEXAM.MathExp
import org.xtext.example.mydsl1.sQLEXAM.Expression
import org.xtext.example.mydsl1.sQLEXAM.Numbers
import org.xtext.example.mydsl1.sQLEXAM.Plus
import org.xtext.example.mydsl1.sQLEXAM.Minus
import org.xtext.example.mydsl1.sQLEXAM.Mult
import org.xtext.example.mydsl1.sQLEXAM.Div
import org.xtext.example.mydsl1.sQLEXAM.Parenthesis
import org.xtext.example.mydsl1.sQLEXAM.RemoveAll
import org.xtext.example.mydsl1.sQLEXAM.SelectAll
import org.xtext.example.mydsl1.sQLEXAM.SelectDistinct

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class SQLEXAMGenerator extends AbstractGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
	val SQLSystem modelInstance = resource.allContents.filter(SQLSystem).next
		modelInstance.display


		val addList = new ArrayList<Add> 
		addList.addAll(modelInstance.operation.filter(Add))
		
		val removeList = new ArrayList<Remove> 
		removeList.addAll(modelInstance.operation.filter(Remove))
		
		val selectList = new ArrayList<Select> 
		selectList.addAll(modelInstance.operation.filter(Select))
		
		val relationshipList = new ArrayList<Relationship> 
		relationshipList.addAll(modelInstance.operation.filter(Relationship))
		
		val removeAllList = new ArrayList<RemoveAll> 
		removeAllList.addAll(modelInstance.operation.filter(RemoveAll))
		
		
		val selectAllList = new ArrayList<SelectAll>
		selectAllList.addAll(modelInstance.operation.filter(SelectAll))
		
		
		val selectDistinctList = new ArrayList<SelectDistinct>
		selectDistinctList.addAll(modelInstance.operation.filter(SelectDistinct))
		val tg = resource.allContents.filter(MathExp)
		while(tg.hasNext){
			System::out.println(tg.next.generate)
		}
		
		
		generateEntityFile(modelInstance, modelInstance.name,modelInstance.value,fsa, addList, removeList,selectList, relationshipList, removeAllList, selectAllList, selectDistinctList)
	}
	
		def generateEntityFile(SQLSystem sqlsystem,String systemName, String url, IFileSystemAccess2 fsa, ArrayList<Add> addList, ArrayList<Remove> removeList, ArrayList<Select> selectList, ArrayList<Relationship> relationshipList, ArrayList<RemoveAll> removeAllList, ArrayList<SelectAll> selectAllList, ArrayList<SelectDistinct> selectDistinctList) {
		fsa.generateFile(systemName.toFirstLower+"/db.java", generateEntity(systemName, url, addList, removeList,selectList,relationshipList, removeAllList, selectAllList, selectDistinctList))
		
		System::out.println(systemName.toFirstLower+"/db.java")
	}
	
	
	def CharSequence generateEntity(String systemName, String url, ArrayList<Add> addList, ArrayList<Remove> removeList, ArrayList<Select> selectList, ArrayList<Relationship> relationshipList, ArrayList<RemoveAll> removeAllList, ArrayList<SelectAll> selectAllList, ArrayList<SelectDistinct> selectDistinctList) '''
	package «systemName.toFirstLower»;
	import java.sql.Connection;
	import java.sql.DatabaseMetaData;
	import java.sql.DriverManager;
	import java.sql.ResultSet;
	import java.sql.SQLException;
	import java.sql.Statement;
	
	public class db {
	
	private String url = "«url»" ;
	private String username;
	private String password;
	Connection db = null;
	
	
	«generateConstructor()»
	
	
	«FOR a:addList» 
	«generateAddStatement(a)»
	 «ENDFOR»
	 
	«FOR a:selectList» 
		«generateSelectStament(a)»
    «ENDFOR»

	«FOR a:removeList» 
		«generateRemoveStatement(a)»
		 «ENDFOR»

	
	 «FOR a:relationshipList» 
	 		«generateRelationshipStament(a)»
	 		 «ENDFOR»
	 «FOR a:removeAllList»
		 «removeAll(a)»
	 		«ENDFOR»
	 «FOR a:selectAllList»
	 «selectAll(a)»
	 «ENDFOR»
	 «FOR a:selectDistinctList»
	 	 «selectDistinct(a)»
	 	 «ENDFOR»
	}
	'''
	
	
	def generateAddStatement(Add entity) 
	'''
	 public void add«entity.name»(«IF entity.primaryKey !== null»«entity.primaryKey.type» «entity.primaryKey.name», «ENDIF»«FOR a:entity.attributes SEPARATOR ", "»«a.type» «a.name»«ENDFOR»){
	 	try {
	 	      Statement st = db.createStatement();
	 	      DatabaseMetaData dbm = db.getMetaData();
	 	      ResultSet tables = dbm.getTables(null, null, "«entity.name»", null);
	 	       if(tables.next()){
	 	         
	 	        }else{
	 	          ResultSet rs = st.executeQuery("CREATE TABLE «entity.name» («IF entity.primaryKey !== null» «entity.primaryKey.name» «IF entity.primaryKey.type == "STRING"» varchar(255) «ELSE» int «ENDIF» , «ENDIF»«FOR a:entity.attributes SEPARATOR ", "»«a.name» «IF a.type == "STRING"» varchar(255) «ELSE» int «ENDIF» «ENDFOR» «IF entity.primaryKey!= null», PRIMARY KEY(«entity.primaryKey.name»)«ENDIF»);");  
	 	            }
	 	            st.close();
	 	            }
	 	        catch (java.sql.SQLException e) {
	 	            System.out.println(e.getMessage());
	 	        }try {
	 	            Statement st = db.createStatement();
	 	            
	 	            if(«FOR eAtts:entity.attributes»«eAtts.name»«var x=0»«IF eAtts.requirement1 !== null»«eAtts.requirement1.left.type»«generate(eAtts.requirement1.right)»«IF eAtts.andOr !== null»«FOR andors:eAtts.andOr»«eAtts.andOr.get(x).type»«eAtts.name»«eAtts.andOr.get(x).math.left.type»«generate(eAtts.andOr.get(x).math.right)»«x++»«ENDFOR»«ENDIF»«ENDIF»«ENDFOR» )
	 	            ResultSet rs2 = st.executeQuery("INSERT INTO «entity.name»(«addInsertInto(entity)»);
	 	            rs2.close();
	 	            st.close();
	 	             «IF (entity.primaryKey !== null) && entity.primaryKey.requirement1 !== null || isNotNull(entity) == true»
	 	             if()
	 	             }
	 	             «ENDIF»
	 	            }
	 	        catch (java.sql.SQLException e) {
	 	        } 
	 	
	 }
	 
	 '''
	 
	 def addInsertInto(Add entity){
	 	var str = "";
	 	if(entity.primaryKey !== null && isNotNull(entity) == false){
	 		str = str + entity.primaryKey.name + " , "
	 	}
	 	if(entity.primaryKey !== null && isNotNull(entity) == true){
	 		str = str + entity.primaryKey.name
	 	}
	 	if(isNotNull(entity) == true){
	 		for(i:0 ..<entity.attributes.size){
	 			str = str + entity.attributes.get(i).name
	 			if(i<entity.attributes.size-1){
	 				str = str +","
	 			}
	 		}
	 	}
	 	str = str + ");"
	 	str
	 	}
	 
	def displayAllRequere(List<Attribute> entity){
		var str = "";
		for(i:0..<entity.size){
			if(entity.get(i).requirement1!== null){
				str = str + entity.get(i).name+" "+ entity.get(i).requirement1.left.type +" "+entity.get(i).requirement1.right.generate +  " && "
				if( (str.substring(str.length - 4, str.length) == " && ")){
						str = str.substring(0,str.length - 4)
						}
						str = str + " && " 	
			}
		}
	}
	def removeAll(RemoveAll entity)'''
		 public void removeAll(){
		 try {	            
		 		Statement st = db.createStatement();
		 		ResultSet rs = st.executeQuery("DELETE * FROM «entity.table.table.name»");
		 			rs.close();
		 			st.close();
		 }
		 catch (java.sql.SQLException e) {
		}
	 }
	'''
	
	def selectDistinct(SelectDistinct entity)'''
		public void selectDistinct(){
			try{
			Statement st = db.createStatement();
			ResultSet rs = st.executeQuery("SELECT DISTINCT «entity.name» FROM «entity.table.table.name»");
			rs.close();
			st.close();
			}
			catch(java.sql.SQLException e){
				System.out.println("e.printStrackTrace()");
				}
		}
	'''
	def selectAll(SelectAll entity)'''
		 public void selectAll(){
		        try {
		            Statement st = db.createStatement();
		            ResultSet rs = st.executeQuery("SELECT * FROM «entity.table.table.name»");
		            rs.close();
		            st.close();
		            }
		        catch (java.sql.SQLException e) {
		            System.out.println(e.getMessage());
		        }
		    }
	'''
	def generateRemoveStatement(Remove entity)'''
	 public void remove«entity.name»(«showAllNoneRequere(entity.attribute)»){
	        try {
	            
	            Statement st = db.createStatement();
	            ResultSet rs = st.executeQuery("Delete FROM «entity.table.table.name» WHERE «FOR a:entity.attribute SEPARATOR " and "»«IF a.requirement1 !== null»«displayAllSelectRequere(a)»«ELSE»«a.name» «IF a.type == "String"» ='"+«a.name»+"' «ELSE» ="+«a.name»+" «ENDIF» «ENDIF»  «ENDFOR»" );
	            rs.close();
	            st.close();
	            }
	        catch (java.sql.SQLException e) {
	            System.out.println(e.getMessage());
	        }
	    }
	    
	'''
	
	
	def showAllNoneRequere(List<Attribute> entity){
		var str ="" 
		for(i: 0 ..< entity.size){
			if(entity.get(i).requirement1 == null){
				str = str + entity.get(i).type+ " "+ entity.get(i).name+ " , "
			}
		}
		if(str.length > 0 )
		if(str.substring(str.length - 3, str.length) == " , " ){
			str = str.substring(0,str.length - 3)
		}
		str
		
	}
	
	def generateSelectStament(Select entity)'''
	 public void select«entity.name»(«showAllNoneRequere(entity.attributes)»){
	        try {
	            Statement st = db.createStatement();
	             ResultSet rs = st.executeQuery("SELECT * FROM «entity.table.table.name» WHERE «FOR a:entity.attributes SEPARATOR " and "»«IF a.requirement1 !== null»«displayAllSelectRequere(a)»«ELSE»«a.name» «IF a.type == "String"» ='"+«a.name»+"' «ELSE» ="+«a.name»+" «ENDIF» «ENDIF»  «ENDFOR»");
	            while (rs.next()) {
	             «var n = 1»
	             «FOR a:entity.attributes»
	              System.out.print("«a.name» returned ");
	              System.out.println(rs.getString(«n»));
	              //«n = n+1»
	             «ENDFOR»
	             
	            }
	            rs.close();
	            st.close();
	            }
	        catch (java.sql.SQLException e) {
	            System.out.println(e.getMessage());
	        }
	    }
	    
	'''
	
		def displayAllSelectRequere(Attribute entity){
		var str = ""
		if(entity.requirement1!= null){
		str = str+ entity.name +" "+entity.requirement1.left.type +" "+entity.requirement1.right.generate+ " " 
		}
		}
		
		
		
		
	
	
	def generateRelationshipStament(Relationship entity)'''
	    public void relationship«entity.name»(«FOR a:entity.foreignkey SEPARATOR ", "»«a.type» «a.name»«ENDFOR»){
	            try {
	                Statement st = db.createStatement();
	                DatabaseMetaData dbm = db.getMetaData();
	                ResultSet tables = dbm.getTables(null, null,"«entity.name»" , null);
	                if(tables.next()){
	                    
	                }else{
	                 ResultSet rs = st.executeQuery("CREATE TABLE «entity.name»(«FOR a:entity.foreignkey SEPARATOR ", "»«a.name»«IF a.type == "String"» varchar(255)«ELSE» int«ENDIF»«ENDFOR» ,«FOR a:entity.foreignkey SEPARATOR ", "» FOREIGN KEY(«a.name») REFERENCES «a.overType.name» («a.name»)«ENDFOR»);");
	                           
	                }
	                
	                st.close();
	                //st2.close();
	                }
	            catch (java.sql.SQLException e) {
	                System.out.println(e.getMessage());
	            }try {
	                Statement st = db.createStatement();
	                ResultSet rs2 = st.executeQuery("INSERT INTO «entity.name»(«FOR a:entity.foreignkey SEPARATOR ", "»«a.name»«ENDFOR») VALUES(«FOR a:entity.foreignkey SEPARATOR ", "»«IF a.type =="String"»'"+«a.name»+"'«ELSE»"+«a.name»+" «ENDIF»«ENDFOR»);");
	                rs2.close();
	                st.close();
	                //st2.close();
	                }
	            catch (java.sql.SQLException e) {
	                System.out.println(e.getMessage());
	            }
	        }
	    
		'''
	 
	
	
	
	def generateConstructor() '''
	public db (String Username, String Password) throws SQLException{
		this.username = Username;
		this.password = Password;
		
		try{
		Class.forName("org.postgresql.Driver");
		db = DriverManager.getConnection(url, Username, Password);
	 	}
		catch (java.laqng.ClassNotFoundException e) {
	            System.out.println(e.getMessage());
	     }
	}
	 
	'''
	
	def int generate(MathExp gen) {
		gen.exp.generateExp
	}
		
	def dispatch int generateExp(Expression exp) { exp.exp1.generateExp }
	def dispatch int generateExp(Numbers exp) { exp.value }
	
	def dispatch int generateExp(Plus exp) { 
		exp.exp1.generateExp+exp.exp2.generateExp
	}
	def dispatch int generateExp(Minus exp) {
		exp.exp1.generateExp-exp.exp2.generateExp
	}
	
	def dispatch int generateExp(Mult exp) { 
		exp.exp1.generateExp*exp.exp2.generateExp
	}
	def dispatch int generateExp(Div exp) { 
		exp.exp1.generateExp/exp.exp2.generateExp
	}
	
	def dispatch int generateExp(Parenthesis parenthesis){
		 parenthesis.exp.generateExp
	}
	def isNotNull(Add entity){
		var test = false
		for(Attribute a : entity.attributes){
			if(a.requirement1 !== null){
				test = true
			}
		}
		test
	} 
	
	def display(EObject model) {
  		val res = new XMLResourceImpl
  		res.contents.add(EcoreUtil::copy(model))
  		System::out.println("Dump of model:")
  		res.save(System.out, null);
	}
	
	
}
